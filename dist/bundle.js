!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=0)}([function(n,e,t){"use strict";t.r(e);t(1);document.body.appendChild(document.createElement("div")),window.onload=function(){var n=new(function(){function e(){this.monsterList=document.querySelectorAll("#monsters input"),this.player=document.querySelector("#playerData"),this.listOfMonsters=[],this.monstervalue=0}return e.prototype.getMonsterList=function(){for(var n=0,e=this.monsterList;n<e.length;n++){var t=e[n];t.dataset.name,t.dataset.health,t.dataset.strength;this.listOfMonsters.push(t.dataset.name),this.listOfMonsters.push(t.dataset.health),this.listOfMonsters.push(t.dataset.strength)}console.log(this.listOfMonsters)},e.prototype.getMonster=function(){},e.prototype.getPlayer=function(){var n=this.player.dataset.name+" - "+this.player.dataset.health+" - "+this.player.dataset.strength;console.log(n)},e.prototype.printout=function(){},e.prototype.render=function(){var e=document.querySelector("#playerName"),t=document.querySelector("#playerStrength"),r=document.querySelector("#playerHealth");e.value=this.player.dataset.name,r.value=this.player.dataset.health,t.value=this.player.dataset.strength;var o=document.querySelector("#monsterName"),a=document.querySelector("#monsterStrength"),i=document.querySelector("#monsterHealth");o.value=this.listOfMonsters[this.monstervalue],i.value=this.listOfMonsters[this.monstervalue+1],a.value=this.listOfMonsters[this.monstervalue+2],n.monstervalue,n.monsterList.length,n.player.dataset.health},e}());n.getPlayer(),n.getMonsterList(),n.render(),document.querySelector("#fight").onclick=function(e){console.log("You did an attack vs the monster");var t=document.createElement("li");t.innerHTML="You just did an attack and did "+n.player.dataset.strength+" damage and the monster did an attack and you lost "+n.listOfMonsters[n.monstervalue+2]+" health";var r=document.querySelector("#console");r.appendChild(t),n.player.dataset.health=n.player.dataset.health-n.listOfMonsters[n.monstervalue+2],n.listOfMonsters[n.monstervalue+1]=n.listOfMonsters[n.monstervalue+1]-n.player.dataset.strength,n.player.dataset.health<=0&&(alert("You died and lost the fight"),t.innerHTML="You died and lost the fight",r.appendChild(t)),n.listOfMonsters[n.monstervalue+1]<=0&&(n.monstervalue=n.monstervalue+3,console.log("new monster"),t.innerHTML="You won the fight and a new monster arrived",r.appendChild(t),n.monstervalue>3*n.monsterList.length-2&&(alert("You won the game!"),t.innerHTML="You won the game",r.appendChild(t))),n.render()}}},function(n,e,t){var r=t(2);"string"==typeof r&&(r=[[n.i,r,""]]);var o={insert:"head",singleton:!1};t(4)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(3)(!1)).push([n.i,'/* \nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com \nTwitter: @rich_clark\n*/\n\nhtml,\nbody,\ndiv,\nspan,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\nabbr,\naddress,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\nsamp,\nsmall,\nstrong,\nsub,\nsup,\nvar,\nb,\ni,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\nbody {\n  line-height: 1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nnav ul {\n  list-style: none;\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: "";\n  content: none;\n}\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr[title],\ndfn[title] {\n  border-bottom: 1px dotted;\n  cursor: help;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0;\n}\n\ninput,\nselect {\n  vertical-align: middle;\n}\n#header {\n  text-align: center;\n  background: bisque;\n  padding: 20px;\n  clear: both;\n  border-bottom: 3px solid gray;\n}\n#header h1 {\n  font-size: 40px;\n}\n#monsters {\n  display: none;\n}\n#combatArea {\n  display: flex;\n  align-items: center;\n}\n#player,\n#monster {\n  padding: 20px 40px;\n  text-align: center;\n  flex-grow: 2;\n}\n#fight {\n  flex-grow: 1;\n}\nlabel {\n  display: inline-block;\n  min-width: 100px;\n}\n',""])},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(i=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),a=r.sources.map(function(n){return"/*# sourceURL=".concat(r.sourceRoot).concat(n," */")});return[t].concat(a).concat([o]).join("\n")}var i,s,l;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2],"{").concat(t,"}"):t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var i=0;i<n.length;i++){var s=n[i];null!=s[0]&&r[s[0]]||(t&&!s[2]?s[2]=t:t&&(s[2]="(".concat(s[2],") and (").concat(t,")")),e.push(s))}},e}},function(n,e,t){"use strict";var r,o={},a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}();function s(n,e){for(var t=[],r={},o=0;o<n.length;o++){var a=n[o],i=e.base?a[0]+e.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):t.push(r[i]={id:i,parts:[s]})}return t}function l(n,e){for(var t=0;t<n.length;t++){var r=n[t],a=o[r.id],i=0;if(a){for(a.refs++;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(m(r.parts[i],e))}else{for(var s=[];i<r.parts.length;i++)s.push(m(r.parts[i],e));o[r.id]={id:r.id,refs:1,parts:s}}}}function u(n){var e=document.createElement("style");if(void 0===n.attributes.nonce){var r=t.nc;r&&(n.attributes.nonce=r)}if(Object.keys(n.attributes).forEach(function(t){e.setAttribute(t,n.attributes[t])}),"function"==typeof n.insert)n.insert(e);else{var o=i(n.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}return e}var c,d=(c=[],function(n,e){return c[n]=e,c.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}var p=null,h=0;function m(n,e){var t,r,o;if(e.singleton){var a=h++;t=p||(p=u(e)),r=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=u(e),r=function(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o&&n.setAttribute("media",o),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a());var t=s(n,e);return l(t,e),function(n){for(var r=[],a=0;a<t.length;a++){var i=t[a],u=o[i.id];u&&(u.refs--,r.push(u))}n&&l(s(n,e),e);for(var c=0;c<r.length;c++){var d=r[c];if(0===d.refs){for(var f=0;f<d.parts.length;f++)d.parts[f]();delete o[d.id]}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3M/OTgxOSIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZG9jdW1lbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVFbGVtZW50Iiwid2luZG93Iiwib25sb2FkIiwiZ2FtZSIsInRoaXMiLCJtb25zdGVyTGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwbGF5ZXIiLCJxdWVyeVNlbGVjdG9yIiwibGlzdE9mTW9uc3RlcnMiLCJtb25zdGVydmFsdWUiLCJnZXRNb25zdGVyTGlzdCIsIm1vbnN0ZXIiLCJkYXRhc2V0IiwiaGVhbHRoIiwic3RyZW5ndGgiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsImdldE1vbnN0ZXIiLCJnZXRQbGF5ZXIiLCJ5Z3JpdHRlIiwicHJpbnRvdXQiLCJyZW5kZXIiLCJwbGF5ZXJOYW1lIiwicGxheWVyU3RyZW5ndGgiLCJwbGF5ZXJIZWFsdGgiLCJtb25zdGVyTmFtZSIsIm1vbnN0ZXJTdHJlbmd0aCIsIm1vbnN0ZXJIZWFsdGgiLCJsZW5ndGgiLCJvbmNsaWNrIiwiZXZlbnQiLCJ0b2RvIiwiaW5uZXJIVE1MIiwidG9kb0xpc3QiLCJhbGVydCIsImNvbnRlbnQiLCJvcHRpb25zIiwibG9jYWxzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjb25jYXQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiaWQiLCJfaSIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImxpc3RUb1N0eWxlcyIsInN0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJwYXJ0cyIsImFkZFN0eWxlc1RvRG9tIiwiZG9tU3R5bGUiLCJqIiwicmVmcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsIm9iaiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJmaXJzdENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixF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T0FDVG1DLEVBQVU3RyxLQUFLd0UsSUFJZm9DLEdBRUZyQyxFQURnQlIsRUFBYTZDLEVBQVN0RixHQUNaQSxHQUc1QixJQUFLLElBQUkyQixFQUFLLEVBQUdBLEVBQUs0RCxFQUFVL0YsT0FBUW1DLElBQU0sQ0FDNUMsSUFBSTZELEVBQVlELEVBQVU1RCxHQUUxQixHQUF1QixJQUFuQjZELEVBQVVwQyxLQUFZLENBQ3hCLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJcUMsRUFBVXhDLE1BQU14RCxPQUFRMkQsSUFDMUNxQyxFQUFVeEMsTUFBTUcsWUFHWHRCLEVBQVkyRCxFQUFVOUQiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcclxuZnVuY3Rpb24gY29tcG9uZW50KCkge1xyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAvLyBMb2Rhc2gsIGN1cnJlbnRseSBpbmNsdWRlZCB2aWEgYSBzY3JpcHQsIGlzIHJlcXVpcmVkIGZvciB0aGlzIGxpbmUgdG8gd29ya1xyXG4gIC8vIGVsZW1lbnQuaW5uZXJIVE1MID0gLmpvaW4oW1wiSGVsbG9cIiwgXCJ3ZWJwYWNrXCJdLCBcIiBcIik7XHJcblxyXG4gIHJldHVybiBlbGVtZW50O1xyXG59XHJcblxyXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbXBvbmVudCgpKTtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICBjbGFzcyByZWFkRGF0YSB7XHJcbiAgICBtb25zdGVydmFsdWU6IG51bWJlcjtcclxuICAgIHBsYXllcjogYW55O1xyXG4gICAgbW9uc3Rlckxpc3Q6IGFueTtcclxuICAgIGxpc3RPZk1vbnN0ZXJzOiBhbnk7XHJcblxyXG4gICAgcGxheWVyTmFtZTogSFRNTElucHV0RWxlbWVudDtcclxuICAgIHBsYXllckhlYWx0aDogSFRNTElucHV0RWxlbWVudDtcclxuICAgIHBsYXllclN0cmVuZ3RoOiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgbW9uc3Rlck5hbWU6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBtb25zdGVyU3RyZW5ndGg6IEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBtb25zdGVySGVhbHRoOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLm1vbnN0ZXJMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNtb25zdGVycyBpbnB1dFwiKTtcclxuICAgICAgdGhpcy5wbGF5ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3BsYXllckRhdGFcIik7XHJcbiAgICAgIHRoaXMubGlzdE9mTW9uc3RlcnMgPSBbXTtcclxuICAgICAgdGhpcy5tb25zdGVydmFsdWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1vbnN0ZXJMaXN0KCkge1xyXG4gICAgICBmb3IgKGxldCBtb25zdGVyIG9mIHRoaXMubW9uc3Rlckxpc3QpIHtcclxuICAgICAgICBsZXQgb25lTW9uc3RlciA9XHJcbiAgICAgICAgICBtb25zdGVyLmRhdGFzZXQubmFtZSArXHJcbiAgICAgICAgICBcIiAtIFwiICtcclxuICAgICAgICAgIG1vbnN0ZXIuZGF0YXNldC5oZWFsdGggK1xyXG4gICAgICAgICAgXCIgLSBcIiArXHJcbiAgICAgICAgICBtb25zdGVyLmRhdGFzZXQuc3RyZW5ndGg7XHJcblxyXG4gICAgICAgIHRoaXMubGlzdE9mTW9uc3RlcnMucHVzaChtb25zdGVyLmRhdGFzZXQubmFtZSk7XHJcbiAgICAgICAgdGhpcy5saXN0T2ZNb25zdGVycy5wdXNoKG1vbnN0ZXIuZGF0YXNldC5oZWFsdGgpO1xyXG4gICAgICAgIHRoaXMubGlzdE9mTW9uc3RlcnMucHVzaChtb25zdGVyLmRhdGFzZXQuc3RyZW5ndGgpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdE9mTW9uc3RlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1vbnN0ZXIoKSB7fVxyXG5cclxuICAgIGdldFBsYXllcigpIHtcclxuICAgICAgbGV0IHlncml0dGUgPVxyXG4gICAgICAgIHRoaXMucGxheWVyLmRhdGFzZXQubmFtZSArXHJcbiAgICAgICAgXCIgLSBcIiArXHJcbiAgICAgICAgdGhpcy5wbGF5ZXIuZGF0YXNldC5oZWFsdGggK1xyXG4gICAgICAgIFwiIC0gXCIgK1xyXG4gICAgICAgIHRoaXMucGxheWVyLmRhdGFzZXQuc3RyZW5ndGg7XHJcbiAgICAgIGNvbnNvbGUubG9nKHlncml0dGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaW50b3V0KCkge31cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgIGxldCBwbGF5ZXJOYW1lOiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwbGF5ZXJOYW1lXCIpO1xyXG4gICAgICBsZXQgcGxheWVyU3RyZW5ndGg6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiI3BsYXllclN0cmVuZ3RoXCJcclxuICAgICAgKTtcclxuICAgICAgbGV0IHBsYXllckhlYWx0aDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIjcGxheWVySGVhbHRoXCJcclxuICAgICAgKTtcclxuXHJcbiAgICAgIHBsYXllck5hbWUudmFsdWUgPSB0aGlzLnBsYXllci5kYXRhc2V0Lm5hbWU7XHJcbiAgICAgIHBsYXllckhlYWx0aC52YWx1ZSA9IHRoaXMucGxheWVyLmRhdGFzZXQuaGVhbHRoO1xyXG4gICAgICBwbGF5ZXJTdHJlbmd0aC52YWx1ZSA9IHRoaXMucGxheWVyLmRhdGFzZXQuc3RyZW5ndGg7XHJcblxyXG4gICAgICBsZXQgbW9uc3Rlck5hbWU6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiI21vbnN0ZXJOYW1lXCJcclxuICAgICAgKTtcclxuICAgICAgbGV0IG1vbnN0ZXJTdHJlbmd0aDogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgXCIjbW9uc3RlclN0cmVuZ3RoXCJcclxuICAgICAgKTtcclxuICAgICAgbGV0IG1vbnN0ZXJIZWFsdGg6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIFwiI21vbnN0ZXJIZWFsdGhcIlxyXG4gICAgICApO1xyXG5cclxuICAgICAgbW9uc3Rlck5hbWUudmFsdWUgPSB0aGlzLmxpc3RPZk1vbnN0ZXJzW3RoaXMubW9uc3RlcnZhbHVlXTtcclxuICAgICAgbW9uc3RlckhlYWx0aC52YWx1ZSA9IHRoaXMubGlzdE9mTW9uc3RlcnNbdGhpcy5tb25zdGVydmFsdWUgKyAxXTtcclxuICAgICAgbW9uc3RlclN0cmVuZ3RoLnZhbHVlID0gdGhpcy5saXN0T2ZNb25zdGVyc1t0aGlzLm1vbnN0ZXJ2YWx1ZSArIDJdO1xyXG5cclxuICAgICAgaWYgKGdhbWUubW9uc3RlcnZhbHVlID4gZ2FtZS5tb25zdGVyTGlzdC5sZW5ndGggKiAzIC0gMikge1xyXG4gICAgICAgIC8vICAgbW9uc3Rlck5hbWUudmFsdWUgPSBcIllvdSBhcmUgdGhlIGtpbmdcIjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZ2FtZS5wbGF5ZXIuZGF0YXNldC5oZWFsdGggPD0gMCkge1xyXG4gICAgICAgIC8vIHBsYXllck5hbWUudmFsdWUgPSBcIkxvb3NlciFcIjtcclxuICAgICAgICAvLyBwbGF5ZXJIZWFsdGgudmFsdWUgPSBcIkJldHRlciBsdWNrIG5leHQgdGltZVwiO1xyXG4gICAgICAgIC8vICBwbGF5ZXJTdHJlbmd0aC52YWx1ZSA9IFwiTG9vc2VyIVwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgZ2FtZSA9IG5ldyByZWFkRGF0YSgpO1xyXG4gIGdhbWUuZ2V0UGxheWVyKCk7XHJcbiAgZ2FtZS5nZXRNb25zdGVyTGlzdCgpO1xyXG5cclxuICBnYW1lLnJlbmRlcigpO1xyXG5cclxuICB2YXIgYnV0dG9uOiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmaWdodFwiKTtcclxuXHJcbiAgYnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbihldmVudDogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIllvdSBkaWQgYW4gYXR0YWNrIHZzIHRoZSBtb25zdGVyXCIpO1xyXG5cclxuICAgIGxldCB0b2RvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xyXG4gICAgdG9kby5pbm5lckhUTUwgPVxyXG4gICAgICBcIllvdSBqdXN0IGRpZCBhbiBhdHRhY2sgYW5kIGRpZCBcIiArXHJcbiAgICAgIGdhbWUucGxheWVyLmRhdGFzZXQuc3RyZW5ndGggK1xyXG4gICAgICBcIiBkYW1hZ2UgYW5kIHRoZSBtb25zdGVyIGRpZCBhbiBhdHRhY2sgYW5kIHlvdSBsb3N0IFwiICtcclxuICAgICAgZ2FtZS5saXN0T2ZNb25zdGVyc1tnYW1lLm1vbnN0ZXJ2YWx1ZSArIDJdICtcclxuICAgICAgXCIgaGVhbHRoXCI7XHJcbiAgICBsZXQgdG9kb0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnNvbGVcIik7XHJcbiAgICB0b2RvTGlzdC5hcHBlbmRDaGlsZCh0b2RvKTtcclxuXHJcbiAgICBnYW1lLnBsYXllci5kYXRhc2V0LmhlYWx0aCA9XHJcbiAgICAgIGdhbWUucGxheWVyLmRhdGFzZXQuaGVhbHRoIC0gZ2FtZS5saXN0T2ZNb25zdGVyc1tnYW1lLm1vbnN0ZXJ2YWx1ZSArIDJdO1xyXG5cclxuICAgIGdhbWUubGlzdE9mTW9uc3RlcnNbZ2FtZS5tb25zdGVydmFsdWUgKyAxXSA9XHJcbiAgICAgIGdhbWUubGlzdE9mTW9uc3RlcnNbZ2FtZS5tb25zdGVydmFsdWUgKyAxXSAtIGdhbWUucGxheWVyLmRhdGFzZXQuc3RyZW5ndGg7XHJcblxyXG4gICAgaWYgKGdhbWUucGxheWVyLmRhdGFzZXQuaGVhbHRoIDw9IDApIHtcclxuICAgICAgYWxlcnQoXCJZb3UgZGllZCBhbmQgbG9zdCB0aGUgZmlnaHRcIik7XHJcbiAgICAgIHRvZG8uaW5uZXJIVE1MID0gXCJZb3UgZGllZCBhbmQgbG9zdCB0aGUgZmlnaHRcIjtcclxuICAgICAgdG9kb0xpc3QuYXBwZW5kQ2hpbGQodG9kbyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdhbWUubGlzdE9mTW9uc3RlcnNbZ2FtZS5tb25zdGVydmFsdWUgKyAxXSA8PSAwKSB7XHJcbiAgICAgIGdhbWUubW9uc3RlcnZhbHVlID0gZ2FtZS5tb25zdGVydmFsdWUgKyAzO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIm5ldyBtb25zdGVyXCIpO1xyXG4gICAgICB0b2RvLmlubmVySFRNTCA9IFwiWW91IHdvbiB0aGUgZmlnaHQgYW5kIGEgbmV3IG1vbnN0ZXIgYXJyaXZlZFwiO1xyXG4gICAgICB0b2RvTGlzdC5hcHBlbmRDaGlsZCh0b2RvKTtcclxuXHJcbiAgICAgIGlmIChnYW1lLm1vbnN0ZXJ2YWx1ZSA+IGdhbWUubW9uc3Rlckxpc3QubGVuZ3RoICogMyAtIDIpIHtcclxuICAgICAgICBhbGVydChcIllvdSB3b24gdGhlIGdhbWUhXCIpO1xyXG4gICAgICAgIHRvZG8uaW5uZXJIVE1MID0gXCJZb3Ugd29uIHRoZSBnYW1lXCI7XHJcbiAgICAgICAgdG9kb0xpc3QuYXBwZW5kQ2hpbGQodG9kbyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnYW1lLnJlbmRlcigpO1xyXG4gIH07XHJcbn07XHJcblxyXG4vKiBjbGFzcyBQbGF5ZXIge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgaGVhbHRoLCBzdHJlbmd0aCkge1xyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMuaGVhbHRoID0gaGVhbHRoO1xyXG4gICAgdGhpcy5zdHJlbmd0aCA9IHN0cmVuZ3RoO1xyXG4gICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbGFzcyBNb25zdGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGhlYWx0aCwgc3RyZW5ndGgpIHtcclxuICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLmhlYWx0aCA9IGhlYWx0aDtcclxuICAgIHRoaXMuc3RyZW5ndGggPSBzdHJlbmd0aDtcclxuICAgIH1cclxuICAgIH0gKi9cclxuIiwidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qIFxcbmh0bWw1ZG9jdG9yLmNvbSBSZXNldCBTdHlsZXNoZWV0XFxudjEuNi4xXFxuTGFzdCBVcGRhdGVkOiAyMDEwLTA5LTE3XFxuQXV0aG9yOiBSaWNoYXJkIENsYXJrIC0gaHR0cDovL3JpY2hjbGFya2Rlc2lnbi5jb20gXFxuVHdpdHRlcjogQHJpY2hfY2xhcmtcXG4qL1xcblxcbmh0bWwsXFxuYm9keSxcXG5kaXYsXFxuc3BhbixcXG5vYmplY3QsXFxuaWZyYW1lLFxcbmgxLFxcbmgyLFxcbmgzLFxcbmg0LFxcbmg1LFxcbmg2LFxcbnAsXFxuYmxvY2txdW90ZSxcXG5wcmUsXFxuYWJicixcXG5hZGRyZXNzLFxcbmNpdGUsXFxuY29kZSxcXG5kZWwsXFxuZGZuLFxcbmVtLFxcbmltZyxcXG5pbnMsXFxua2JkLFxcbnEsXFxuc2FtcCxcXG5zbWFsbCxcXG5zdHJvbmcsXFxuc3ViLFxcbnN1cCxcXG52YXIsXFxuYixcXG5pLFxcbmRsLFxcbmR0LFxcbmRkLFxcbm9sLFxcbnVsLFxcbmxpLFxcbmZpZWxkc2V0LFxcbmZvcm0sXFxubGFiZWwsXFxubGVnZW5kLFxcbnRhYmxlLFxcbmNhcHRpb24sXFxudGJvZHksXFxudGZvb3QsXFxudGhlYWQsXFxudHIsXFxudGgsXFxudGQsXFxuYXJ0aWNsZSxcXG5hc2lkZSxcXG5jYW52YXMsXFxuZGV0YWlscyxcXG5maWdjYXB0aW9uLFxcbmZpZ3VyZSxcXG5mb290ZXIsXFxuaGVhZGVyLFxcbmhncm91cCxcXG5tZW51LFxcbm5hdixcXG5zZWN0aW9uLFxcbnN1bW1hcnksXFxudGltZSxcXG5tYXJrLFxcbmF1ZGlvLFxcbnZpZGVvIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IDA7XFxuICBvdXRsaW5lOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmJvZHkge1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxufVxcblxcbmFydGljbGUsXFxuYXNpZGUsXFxuZGV0YWlscyxcXG5maWdjYXB0aW9uLFxcbmZpZ3VyZSxcXG5mb290ZXIsXFxuaGVhZGVyLFxcbmhncm91cCxcXG5tZW51LFxcbm5hdixcXG5zZWN0aW9uIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5uYXYgdWwge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuYmxvY2txdW90ZSxcXG5xIHtcXG4gIHF1b3Rlczogbm9uZTtcXG59XFxuXFxuYmxvY2txdW90ZTpiZWZvcmUsXFxuYmxvY2txdW90ZTphZnRlcixcXG5xOmJlZm9yZSxcXG5xOmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiO1xcbiAgY29udGVudDogbm9uZTtcXG59XFxuXFxuYSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1zaXplOiAxMDAlO1xcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcbmlucyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY5O1xcbiAgY29sb3I6ICMwMDA7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbi8qIGNoYW5nZSBjb2xvdXJzIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcbm1hcmsge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmOTtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbmRlbCB7XFxuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcXG59XFxuXFxuYWJiclt0aXRsZV0sXFxuZGZuW3RpdGxlXSB7XFxuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkO1xcbiAgY3Vyc29yOiBoZWxwO1xcbn1cXG5cXG50YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XFxufVxcblxcbi8qIGNoYW5nZSBib3JkZXIgY29sb3VyIHRvIHN1aXQgeW91ciBuZWVkcyAqL1xcbmhyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2NjY2NjYztcXG4gIG1hcmdpbjogMWVtIDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5pbnB1dCxcXG5zZWxlY3Qge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuI2hlYWRlciB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kOiBiaXNxdWU7XFxuICBwYWRkaW5nOiAyMHB4O1xcbiAgY2xlYXI6IGJvdGg7XFxuICBib3JkZXItYm90dG9tOiAzcHggc29saWQgZ3JheTtcXG59XFxuI2hlYWRlciBoMSB7XFxuICBmb250LXNpemU6IDQwcHg7XFxufVxcbiNtb25zdGVycyB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4jY29tYmF0QXJlYSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuI3BsYXllcixcXG4jbW9uc3RlciB7XFxuICBwYWRkaW5nOiAyMHB4IDQwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmbGV4LWdyb3c6IDI7XFxufVxcbiNmaWdodCB7XFxuICBmbGV4LWdyb3c6IDE7XFxufVxcbmxhYmVsIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIG1pbi13aWR0aDogMTAwcHg7XFxufVxcblwiLCBcIlwiXSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZXMgPSBbXTtcbiAgdmFyIG5ld1N0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY3NzID0gaXRlbVsxXTtcbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdO1xuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH07XG5cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcGFydHM6IFtwYXJ0XVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrKztcblxuICAgICAgZm9yICg7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHJlZnM6IDEsXG4gICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG4gICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgZG9tU3R5bGUucmVmcy0tO1xuICAgICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgICBhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtYXlSZW1vdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2RvbVN0eWxlID0gbWF5UmVtb3ZlW19pXTtcblxuICAgICAgaWYgKF9kb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgX2RvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bX2RvbVN0eWxlLmlkXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59OyJdLCJzb3VyY2VSb290IjoiIn0=